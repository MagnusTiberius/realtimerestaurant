# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.9

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/MagnusTiberius/realtimerestaurant
    steps:
      - checkout

      #- run: make

      #- save_cache: key: v1-pkg-cache
      #    paths:
      #      - "/go/pkg"

      - setup_remote_docker

      # specify any bash command here prefixed with `run: `
      - run: echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
      - run:
          command: |
            sudo apt-get install lsb-core
            lsb_release -c -s
            export CLOUD_SDK_REPO=$(lsb_release -c -s)
            echo $CLOUD_SDK_REPO
            echo "deb http://packages.cloud.google.com/apt cloud-sdk-${CLOUD_SDK_REPO} main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            cat /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      - run:
          command: |
            sudo apt-get update
            sudo apt-get install google-cloud-sdk kubectl

      - run: which gcloud

      #- run: sudo gcloud --quiet components update
      - run:
          command: |
            sudo gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            sudo gcloud config set project weatherservice-195512
            sudo gcloud config set compute/zone us-central1-a
            sudo gcloud auth list

      - run:
          command: |
            go version
            go get -v -t -d github.com/rs/cors
            go get -v -t -d github.com/gorilla/handlers
            go get -v -t -d github.com/gorilla/mux
            go get -v -t -d github.com/aws/aws-sdk-go/aws
            go get -v -t -d github.com/aws/aws-sdk-go/service/dynamodb
            go get -v -t -d github.com/guregu/dynamo
      #- run: go test -v ./...
      - run:
          command: |
            cd ./reservation
            go build
            ls -la
            docker build -t us.gcr.io/weatherservice-195512/rtrreservation .
      - run:
          command: |
            cd ./enrolment
            go build
            ls -la
            docker build -t us.gcr.io/weatherservice-195512/rtrenrolment .
      - run:
          command: |
            cd ./signage
            go build
            ls -la
            docker build -t us.gcr.io/weatherservice-195512/signage .
      - run: ls -la
      # docker build, login and push.
      #- run: docker build -t "magnustiberius/rtrreservation" .
      #- run: docker login -u=$DOCKER_USER -p=$DOCKER_PASS
      #- run: docker push  magnustiberius/weatherserviceweb


      - run:
          command: |
            gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
            gcloud auth list
            gcloud config set account dev-854@weatherservice-195512.iam.gserviceaccount.com
            gcloud config set project weatherservice-195512
            gcloud config set compute/zone us-central1-a
      - run:
          command: |
            #gcloud docker -- push us.gcr.io/weatherservice-195512/rtrreservation
            #gcloud docker -- push us.gcr.io/weatherservice-195512/rtrenrolment
            #gcloud docker -- push us.gcr.io/weatherservice-195512/signage
            gcloud container images list
            gcloud compute instances list
      #- run: gcloud container clusters create weather-cluster --num-nodes=2
      - run: gcloud container clusters get-credentials weather-cluster
      #- run: kubectl get pods --all-namespaces -o jsonpath="{.items[*].spec.containers[*].image}"
      - run: kubectl get pods
      #- run: kubectl delete pods --all
      #- run: kubectl get pods
      #- run: kubectl run rtr-reservation --image=us.gcr.io/weatherservice-195512/rtrreservation --port 8094
      #- run: kubectl delete -f pod.yml
      #- run: kubectl create -f pod.yml
      #- run: kubectl get pods
      #- run: kubectl expose deployment rtr-reservation --type=LoadBalancer --port 8094 --target-port 8094
